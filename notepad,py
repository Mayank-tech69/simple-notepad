import tkinter as tk
from tkinter import filedialog, font

class ClassicNotepadApp:
    def __init__(self, root):
        self.root = root
        self.text_area = tk.Text(self.root)
        self.text_area.pack(fill=tk.BOTH, expand=1)
        self.font = font.Font(family="Helvetica", size=12)
        self.text_area.configure(font=self.font)

        # Create menu
        self.menu = tk.Menu(self.root)
        self.root.config(menu=self.menu)

        # File menu
        self.file_menu = tk.Menu(self.menu, tearoff=0)
        self.file_menu.add_command(label="New", command=self.new_file)
        self.file_menu.add_command(label="Open", command=self.open_file)
        self.file_menu.add_command(label="Save", command=self.save_file)
        self.file_menu.add_command(label="Exit", command=self.root.quit)
        self.menu.add_cascade(label="File", menu=self.file_menu)

        # Edit menu
        self.edit_menu = tk.Menu(self.menu, tearoff=0)
        self.edit_menu.add_command(label="Font", command=self.change_font)
        self.menu.add_cascade(label="Edit", menu=self.edit_menu)

        # Info menu
        self.info_menu = tk.Menu(self.menu, tearoff=0)
        self.info_menu.add_command(label="About", command=self.show_info)
        self.menu.add_cascade(label="Info", menu=self.info_menu)

        self.root.title("Classic Notepad")

    def new_file(self):
        self.text_area.delete(1.0, tk.END)

    def open_file(self):
        file_path = filedialog.askopenfilename(
            defaultextension=".txt",
            filetypes=[("All Files", "*.*"), ("Text Documents", "*.txt")]
        )
        if file_path:
            self.text_area.delete(1.0, tk.END)
            with open(file_path, "r") as file:
                self.text_area.insert(1.0, file.read())

    def save_file(self):
        file_path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("All Files", "*.*"), ("Text Documents", "*.txt")]
        )
        if file_path:
            with open(file_path, "w") as file:
                file.write(self.text_area.get(1.0, tk.END))

    def change_font(self):
        def change_font_style():
            font_family = family_var.get()
            font_size = size_var.get()
            font_style = style_var.get()
            self.font.configure(family=font_family, size=font_size)
            if font_style == "Bold":
                self.font.configure(weight="bold")
            elif font_style == "Italic":
                self.font.configure(slant="italic")
            elif font_style == "Bold Italic":
                self.font.configure(weight="bold", slant="italic")
            else:
                self.font.configure(weight="normal", slant="roman")
            self.text_area.configure(font=self.font)
            font_window.destroy()

        font_window = tk.Toplevel(self.root)
        family_var = tk.StringVar()
        size_var = tk.StringVar()
        style_var = tk.StringVar()

        tk.Label(font_window, text="Font Family:").grid(row=0, column=0)
        family_option = tk.OptionMenu(font_window, family_var, "Helvetica", "Arial", "Times New Roman")
        family_option.grid(row=0, column=1)

        tk.Label(font_window, text="Font Size:").grid(row=1, column=0)
        size_option = tk.OptionMenu(font_window, size_var, "12", "14", "16", "18", "20")
        size_option.grid(row=1, column=1)

        tk.Label(font_window, text="Font Style:").grid(row=2, column=0)
        style_option = tk.OptionMenu(font_window, style_var, "Normal", "Bold", "Italic", "Bold Italic")
        style_option.grid(row=2, column=1)

        tk.Button(font_window, text="Apply", command=change_font_style).grid(row=3, column=0, columnspan=2)

    def show_info(self):
        info_window = tk.Toplevel(self.root)
        info_window.title("About Classic Notepad")
        tk.Label(info_window, text="Classic Notepad", font=("Helvetica", 16)).pack(pady=10)
        tk.Label(info_window, text="A simple text editor application").pack()
        tk.Label(info_window, text="Created by: Mayank").pack(pady=40)

if __name__ == "__main__":
    root = tk.Tk()
    app = ClassicNotepadApp(root)
    root.mainloop()